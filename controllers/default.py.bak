# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

# -------------------------------------------------------------------------
# This is a sample controller
# - index is the default action of any application
# - user is required for authentication and authorization
# - download is for downloading files uploaded in the db (does streaming)
# -------------------------------------------------------------------------


def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    response.flash = T("Hello World")
    return dict(message=T('Welcome to web2py!'))


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()



def novo_carro():
    form = SQLFORM(Carros)
    if form.process().accepted:
        session.flash = 'Novo carro cadastrado: %s' % form.vars.placa
        redirect(URL('novo_carro'))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)



def novo_cliente():
    form = SQLFORM(Clientes)
    if form.process().accepted:
        session.flash = 'Novo cliente cadastrado: %s' % form.vars.titulo
        redirect(URL('novo_cliente'))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)



def ver_carros():
    grid = SQLFORM.grid(Carros)
    return dict(grid=grid)

def ver_clientes():
    grid = SQLFORM.grid(Clientes)
    return dict(grid=grid)




def editar_carros():
    form = SQLFORM(Carros, request.vars.placa, deletable = True)
    if form.process().accepted:
        session.flash = 'Carro alterado: %s' % form.vars.placa
        redirect(URL('ver_carros'))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)



def editar_cliente():
    form = SQLFORM(Clientes, request.vars.cpf, deletable = True)
    if form.process().accepted:
        session.flash = 'Cliente alterado: %s' % form.vars.cpf
        redirect(URL('ver_clientes'))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)



def nova_venda():
    form = SQLFORM(CarrosVendidos)
    if form.process().accepted:
        session.flash = 'Nova venda cadastrada: %s' % form.vars.carro
        db(db.Carros.placa == form.carro.placa).delete()
        redirect(URL('nova_venda'))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)



def ver_venda():
   grid = SQLFORM.grid(CarrosVendidos)
    return dict(grid=grid)



def editar_venda():
    form = SQLFORM(CarrosVendidos, request.vars.id, deletable = True)
    if form.process().accepted:
        session.flash = 'venda alterada: %s' % form.vars.carro
        redirect(URL('ver_venda'))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)
